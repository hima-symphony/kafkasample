/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package example.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserV2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5891591082118182257L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserV2\",\"namespace\":\"example.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"favoriteNumber\",\"type\":[\"int\",\"null\"]},{\"name\":\"address\",\"type\":[\"string\",\"null\"],\"default\":\"null\"},{\"name\":\"zipcode\",\"type\":[\"int\",\"null\"],\"default\":\"null\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.Integer favoriteNumber;
  @Deprecated public java.lang.CharSequence address;
  @Deprecated public java.lang.Integer zipcode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserV2() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param favoriteNumber The new value for favoriteNumber
   * @param address The new value for address
   * @param zipcode The new value for zipcode
   */
  public UserV2(java.lang.CharSequence name, java.lang.Integer favoriteNumber, java.lang.CharSequence address, java.lang.Integer zipcode) {
    this.name = name;
    this.favoriteNumber = favoriteNumber;
    this.address = address;
    this.zipcode = zipcode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return favoriteNumber;
    case 2: return address;
    case 3: return zipcode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: favoriteNumber = (java.lang.Integer)value$; break;
    case 2: address = (java.lang.CharSequence)value$; break;
    case 3: zipcode = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'favoriteNumber' field.
   * @return The value of the 'favoriteNumber' field.
   */
  public java.lang.Integer getFavoriteNumber() {
    return favoriteNumber;
  }

  /**
   * Sets the value of the 'favoriteNumber' field.
   * @param value the value to set.
   */
  public void setFavoriteNumber(java.lang.Integer value) {
    this.favoriteNumber = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'zipcode' field.
   * @return The value of the 'zipcode' field.
   */
  public java.lang.Integer getZipcode() {
    return zipcode;
  }

  /**
   * Sets the value of the 'zipcode' field.
   * @param value the value to set.
   */
  public void setZipcode(java.lang.Integer value) {
    this.zipcode = value;
  }

  /**
   * Creates a new UserV2 RecordBuilder.
   * @return A new UserV2 RecordBuilder
   */
  public static example.avro.UserV2.Builder newBuilder() {
    return new example.avro.UserV2.Builder();
  }

  /**
   * Creates a new UserV2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserV2 RecordBuilder
   */
  public static example.avro.UserV2.Builder newBuilder(example.avro.UserV2.Builder other) {
    return new example.avro.UserV2.Builder(other);
  }

  /**
   * Creates a new UserV2 RecordBuilder by copying an existing UserV2 instance.
   * @param other The existing instance to copy.
   * @return A new UserV2 RecordBuilder
   */
  public static example.avro.UserV2.Builder newBuilder(example.avro.UserV2 other) {
    return new example.avro.UserV2.Builder(other);
  }

  /**
   * RecordBuilder for UserV2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserV2>
    implements org.apache.avro.data.RecordBuilder<UserV2> {

    private java.lang.CharSequence name;
    private java.lang.Integer favoriteNumber;
    private java.lang.CharSequence address;
    private java.lang.Integer zipcode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(example.avro.UserV2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.favoriteNumber)) {
        this.favoriteNumber = data().deepCopy(fields()[1].schema(), other.favoriteNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.zipcode)) {
        this.zipcode = data().deepCopy(fields()[3].schema(), other.zipcode);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserV2 instance
     * @param other The existing instance to copy.
     */
    private Builder(example.avro.UserV2 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.favoriteNumber)) {
        this.favoriteNumber = data().deepCopy(fields()[1].schema(), other.favoriteNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.zipcode)) {
        this.zipcode = data().deepCopy(fields()[3].schema(), other.zipcode);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public example.avro.UserV2.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public example.avro.UserV2.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'favoriteNumber' field.
      * @return The value.
      */
    public java.lang.Integer getFavoriteNumber() {
      return favoriteNumber;
    }

    /**
      * Sets the value of the 'favoriteNumber' field.
      * @param value The value of 'favoriteNumber'.
      * @return This builder.
      */
    public example.avro.UserV2.Builder setFavoriteNumber(java.lang.Integer value) {
      validate(fields()[1], value);
      this.favoriteNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'favoriteNumber' field has been set.
      * @return True if the 'favoriteNumber' field has been set, false otherwise.
      */
    public boolean hasFavoriteNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'favoriteNumber' field.
      * @return This builder.
      */
    public example.avro.UserV2.Builder clearFavoriteNumber() {
      favoriteNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public example.avro.UserV2.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.address = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public example.avro.UserV2.Builder clearAddress() {
      address = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'zipcode' field.
      * @return The value.
      */
    public java.lang.Integer getZipcode() {
      return zipcode;
    }

    /**
      * Sets the value of the 'zipcode' field.
      * @param value The value of 'zipcode'.
      * @return This builder.
      */
    public example.avro.UserV2.Builder setZipcode(java.lang.Integer value) {
      validate(fields()[3], value);
      this.zipcode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'zipcode' field has been set.
      * @return True if the 'zipcode' field has been set, false otherwise.
      */
    public boolean hasZipcode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'zipcode' field.
      * @return This builder.
      */
    public example.avro.UserV2.Builder clearZipcode() {
      zipcode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public UserV2 build() {
      try {
        UserV2 record = new UserV2();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.favoriteNumber = fieldSetFlags()[1] ? this.favoriteNumber : (java.lang.Integer) defaultValue(fields()[1]);
        record.address = fieldSetFlags()[2] ? this.address : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.zipcode = fieldSetFlags()[3] ? this.zipcode : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
